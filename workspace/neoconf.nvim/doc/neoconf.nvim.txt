*neoconf.nvim.txt*         For NVIM v0.5.0        Last change: 2022 October 11

==============================================================================
Table of Contents                             *neoconf.nvim-table-of-contents*

1. settings.nvim                                  |neoconf.nvim-settings.nvim|
  - Todo                                                   |neoconf.nvim-todo|
  - Features                                           |neoconf.nvim-features|
  - Requirements                                   |neoconf.nvim-requirements|
  - Installation                                   |neoconf.nvim-installation|
  - Setup                                                 |neoconf.nvim-setup|
  - Configuration                                 |neoconf.nvim-configuration|
  - Usage                                                 |neoconf.nvim-usage|
  - API                                                     |neoconf.nvim-api|
  - Acknowledgment                               |neoconf.nvim-acknowledgment|
  - Supported Language Servers       |neoconf.nvim-supported-language-servers|

==============================================================================
1. settings.nvim                                  *neoconf.nvim-settings.nvim*

**Settings.nvim** is a lua plugin to manage global and workspace-local Neovim
settings.

TODO                                                       *neoconf.nvim-todo*


- new name since people seem to use settings as a module in their config (nvim-settings??)
- split off lsp-config as separate plugin?
- naming for generated emmylua
- generate list of supported lsp servers
- name of plugin??
- importers?
- keymaps
- json => jsonc for settings files
- commands to edit json settings files
- less magic for patterns (use {name = .., key = .., …})
- rename to settings.nvim??
- check vscode config api
- support lazy-loading of workspace.nvim and register plugins
- path.join (workspace.has_file)


FEATURES                                               *neoconf.nvim-features*


- configure Neovim using **JSON** files
    - global settings: `~/.config/nvim/settings.json`
    - local settings: `~/projects/foobar/.nvim.settings.json`
- live reload of your settings
- extensible plugin architecture
- built-in plugins:
    - **options:** configure global (`vim.opt`) and local (`vim.opt_local`)
        options.
    - **lsp**: configure the LSP clients using workspace settings.
- some workspace plugins support existing vscode settings read from
    `.vscode/settings.json`. For LSP for example, this means that existing
    configuration for LSP servers work out of the box.
- live-reload of your settings: whenever you change a local or global JSON
    settings file, the changes are applied immediately


REQUIREMENTS                                       *neoconf.nvim-requirements*


- Neovim >= 0.7.2


INSTALLATION                                       *neoconf.nvim-installation*

Install the plugin with your preferred package manager:

PACKER <HTTPS://GITHUB.COM/WBTHOMASON/PACKER.NVIM> ~

>
    -- Lua
    use({
      "folke/settings.nvim",
      module = "settings",
      config = function()
        require("settings").setup()
      end,
    })
<


SETUP                                                     *neoconf.nvim-setup*

It’s important that you set up `settings.nvim` **BEFORE** `nvim-lspconfig`.

>
    require("settings").setup({
      -- override any of the default settings here
    })
    require("lspconfig").sumneko_lua.setup(...)
<


CONFIGURATION                                     *neoconf.nvim-configuration*

**settings.nvim** comes with the following defaults:

>
    {
      -- name of the local settings files
      local_settings = ".nvim.settings.json",
      -- name of the global settings file in your Neovim config directory
      global_settings = "settings.json",
      -- import existing settinsg from other plugins
      import = {
        vscode = true, -- local .vscode/settings.json
        coc = true, -- global/local coc-settings.json
        nlsp = true, -- nlsp-settings.nvim json settings
      },
      -- send new configuration to lsp clients when changing json settings
      live_reload = true,
      -- set the filetype to jsonc for settings files, so you can use comments
      -- make sure you have the jsonc treesitter parser installed!
      filetype_jsonc = true,
      plugins = {
        -- configures lsp clients with settings in the following order:
        -- - lua settings passed in lspconfig setup
        -- - global json settings
        -- - local json settings
        lspconfig = {
          enabled = true,
        },
        -- configures jsonls to get completion in .nvim.settings.json files
        jsonls = {
          enabled = true,
          -- only show completion in json settings for configured lsp servers
          configured_servers_only = true,
        },
        -- configures sumneko_lua to get completion of lspconfig server settings
        sumneko_lua = {
          -- by default, sumneko_lua annotations are only enabled in your neovim config directory
          enabled_for_neovim_config = true,
          -- explicitely enable adding annotations. Mostly relevant to put in your local .nvim.settings.json file
          enabled = false,
        },
      },
    }
<


USAGE                                                     *neoconf.nvim-usage*

THE `:SETTINGS` COMMAND ~

COMPLETION AND VALIDATION FOR YOUR `JSON` SETTINGS FILES ~

COMPLETION AND VALIDATION FOR YOUR `LUA` SETTINGS FILES ~

IMPORTING YOUR EXISTING SETTINGS ~

API                                                         *neoconf.nvim-api*

ACKNOWLEDGMENT                                   *neoconf.nvim-acknowledgment*


- json.lua <https://github.com/actboy168/json.lua> a pure-lua JSON library for parsing `jsonc` files


SUPPORTED LANGUAGE SERVERS           *neoconf.nvim-supported-language-servers*


- als <https://github.com/AdaCore/ada_language_server/tree/master/integration/vscode/ada/package.json>
- astro <https://github.com/withastro/language-tools/tree/main/packages/vscode/package.json>
- awkls <https://github.com/Beaglefoot/awk-language-server/tree/master/client/package.json>
- bashls <https://github.com/bash-lsp/bash-language-server/tree/master/vscode-client/package.json>
- clangd <https://github.com/clangd/vscode-clangd/tree/master/package.json>
- cssls <https://github.com/microsoft/vscode/tree/main/extensions/css-language-features/package.json>
- dartls <https://github.com/Dart-Code/Dart-Code/tree/master/package.json>
- denols <https://github.com/denoland/vscode_deno/tree/main/package.json>
- elixirls <https://github.com/elixir-lsp/vscode-elixir-ls/tree/master/package.json>
- elmls <https://github.com/elm-tooling/elm-language-client-vscode/tree/master/package.json>
- eslint <https://github.com/microsoft/vscode-eslint/tree/main/package.json>
- flow <https://github.com/flowtype/flow-for-vscode/tree/master/package.json>
- fsautocomplete <https://github.com/ionide/ionide-vscode-fsharp/tree/main/release/package.json>
- grammarly <https://github.com/znck/grammarly/tree/main/extension/package.json>
- haxe_language_server <https://github.com/vshaxe/vshaxe/tree/master/package.json>
- hhvm <https://github.com/slackhq/vscode-hack/tree/master/package.json>
- hie <https://github.com/alanz/vscode-hie-server/tree/master/package.json>
- html <https://github.com/microsoft/vscode/tree/main/extensions/html-language-features/package.json>
- intelephense <https://github.com/bmewburn/vscode-intelephense/tree/master/package.json>
- java_language_server <https://github.com/georgewfraser/java-language-server/tree/master/package.json>
- jdtls <https://github.com/redhat-developer/vscode-java/tree/master/package.json>
- jsonls <https://github.com/microsoft/vscode/tree/master/extensions/json-language-features/package.json>
- julials <https://github.com/julia-vscode/julia-vscode/tree/master/package.json>
- kotlin_language_server <https://github.com/fwcd/vscode-kotlin/tree/master/package.json>
- ltex <https://github.com/valentjn/vscode-ltex/tree/develop/package.json>
- luau_lsp <https://github.com/JohnnyMorganz/luau-lsp/tree/main/editors/code/package.json>
- nickel_ls <https://github.com/tweag/nickel/tree/master/lsp/client-extension/package.json>
- omnisharp <https://github.com/OmniSharp/omnisharp-vscode/tree/master/package.json>
- perlls <https://github.com/richterger/Perl-LanguageServer/tree/master/clients/vscode/perl/package.json>
- perlnavigator <https://github.com/bscan/PerlNavigator/tree/main/package.json>
- perlpls <https://github.com/FractalBoy/perl-language-server/tree/master/client/package.json>
- powershell_es <https://github.com/PowerShell/vscode-powershell/tree/main/package.json>
- psalm <https://github.com/psalm/psalm-vscode-plugin/tree/master/package.json>
- puppet <https://github.com/puppetlabs/puppet-vscode/tree/main/package.json>
- purescriptls <https://github.com/nwolverson/vscode-ide-purescript/tree/master/package.json>
- pylsp <https://github.com/python-lsp/python-lsp-server/tree/develop/pylsp/config/schema.json>
- pyright <https://github.com/microsoft/pyright/tree/master/packages/vscode-pyright/package.json>
- r_language_server <https://github.com/REditorSupport/vscode-r-lsp/tree/master/package.json>
- rescriptls <https://github.com/rescript-lang/rescript-vscode/tree/master/package.json>
- rls <https://github.com/rust-lang/vscode-rust/tree/master/package.json>
- rome <https://github.com/rome/tools/tree/main/editors/vscode/package.json>
- rust_analyzer <https://github.com/rust-analyzer/rust-analyzer/tree/master/editors/code/package.json>
- solargraph <https://github.com/castwide/vscode-solargraph/tree/master/package.json>
- solidity_ls <https://github.com/juanfranblanco/vscode-solidity/tree/master/package.json>
- sorbet <https://github.com/sorbet/sorbet/tree/master/vscode_extension/package.json>
- sourcekit <https://github.com/swift-server/vscode-swift/tree/main/package.json>
- spectral <https://github.com/stoplightio/vscode-spectral/tree/master/package.json>
- stylelint_lsp <https://github.com/bmatcuk/coc-stylelintplus/tree/master/package.json>
- sumneko_lua <https://github.com/sumneko/vscode-lua/tree/master/package.json>
- svelte <https://github.com/sveltejs/language-tools/tree/master/packages/svelte-vscode/package.json>
- svlangserver <https://github.com/eirikpre/VSCode-SystemVerilog/tree/master/package.json>
- tailwindcss <https://github.com/tailwindlabs/tailwindcss-intellisense/tree/master/packages/vscode-tailwindcss/package.json>
- terraformls <https://github.com/hashicorp/vscode-terraform/tree/master/package.json>
- tsserver <https://github.com/microsoft/vscode/tree/main/extensions/typescript-language-features/package.json>
- volar <https://github.com/johnsoncodehk/volar/tree/master/extensions/vscode-vue-language-features/package.json>
- vuels <https://github.com/vuejs/vetur/tree/master/package.json>
- wgls_analyzer <https://github.com/wgsl-analyzer/wgsl-analyzer/tree/main/editors/code/package.json>
- yamlls <https://github.com/redhat-developer/vscode-yaml/tree/master/package.json>
- zeta_note <https://github.com/artempyanykh/zeta-note-vscode/tree/main/package.json>
- zls <https://github.com/zigtools/zls-vscode/tree/master/package.json>


Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
